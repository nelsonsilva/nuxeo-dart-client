{"dependencies":[{"id":"dart.core","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"48","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"65","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"},{"id":"dart.async","uri":"dart-sdk/lib/async/async.dart","name":"dart:async","children":[{"superclass":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamView/T","name":"T"}],"name":"Stream"},"id":"StreamView","comment":"[Stream] wrapper that only exposes the [Stream] interface. ","uri":"dart-sdk/lib/async/stream.dart","name":"StreamView","children":[{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamView/T","name":"T"}],"name":"Stream"},"id":"asBroadcastStream2()","name":"asBroadcastStream","children":[{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"onListen","name":"onListen","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/StreamSubscription","name":"StreamSubscription"},"id":"subscription","uri":"dart-sdk/lib/async/stream.dart","name":"subscription","line":"941","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"onCancel","name":"onCancel","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/StreamSubscription","name":"StreamSubscription"},"id":"subscription","uri":"dart-sdk/lib/async/stream.dart","name":"subscription","line":"942","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"942","kind":"param"}],"line":"941","kind":"method"},{"returnType":{"refId":"dart.async/StreamSubscription","arguments":[{"refId":"dart.async/StreamView/T","name":"T"}],"name":"StreamSubscription"},"id":"listen4()","name":"listen","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"onData","name":"onData","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/StreamView/T","name":"T"},"id":"value","uri":"dart-sdk/lib/async/stream.dart","name":"value","line":"945","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"onError","name":"onError","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"error","uri":"dart-sdk/lib/async/stream.dart","name":"error","line":"946","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"946","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"onDone","name":"onDone","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"line":"947","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"id":"cancelOnError","name":"cancelOnError","line":"948","kind":"param"}],"line":"945","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isBroadcast","name":"isBroadcast","line":"939","kind":"property"},{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamView/T","name":"T"}],"name":"Stream"},"id":"_stream","name":"_stream","isPrivate":true,"line":"935","kind":"variable"},{"id":"1()","name":"","children":[{"initializedField":{"refId":"dart.async/StreamView/_stream","name":"_stream"},"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamView/T","name":"T"}],"name":"Stream"},"id":"_stream","name":"_stream","isPrivate":true,"kind":"param"}],"line":"937","kind":"constructor"},{"id":"T","name":"T","kind":"typeparam"}],"line":"934","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Stream","comment":"\nA source of asynchronous data events.\n\nA Stream provides a sequence of events. Each event is either a data event or\nan error event, representing the result of a single computation. When the\nStream is exhausted, it may send a single \"done\" event.\n\nYou can [listen] on a stream to receive the events it sends. When you listen,\nyou receive a [StreamSubscription] object that can be used to stop listening,\nor to temporarily pause events from the stream.\n\nWhen an event is fired, the listeners at that time are informed.\nIf a listener is added while an event is being fired, the change\nwill only take effect after the event is completely fired. If a listener\nis canceled, it immediately stops receiving events.\n\nWhen the \"done\" event is fired, subscribers are unsubscribed before\nreceiving the event. After the event has been sent, the stream has no\nsubscribers. Adding new subscribers after this point is allowed, but\nthey will just receive a new \"done\" event as soon as possible.\n\nStreams always respect \"pause\" requests. If necessary they need to buffer\ntheir input, but often, and preferably, they can simply request their input\nto pause too.\n\nThere are two kinds of streams: The normal \"single-subscription\" streams and\n\"broadcast\" streams.\n\nA single-subscription stream allows only a single listener at a time.\nIt holds back events until it gets a listener, and it may exhaust\nitself when the listener is unsubscribed, even if the stream wasn't done.\n\nSingle-subscription streams are generally used for streaming parts of\ncontiguous data like file I/O.\n\nA broadcast stream allows any number of listeners, and it fires\nits events when they are ready, whether there are listeners or not.\n\nBroadcast streams are used for independent events/observers.\n\nThe default implementation of [isBroadcast] returns false.\nA broadcast stream inheriting from [Stream] must override [isBroadcast]\nto return [:true:].\n","uri":"dart-sdk/lib/async/stream.dart","name":"Stream","children":[{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"asBroadcastStream2()","comment":"\nReturns a multi-subscription stream that produces the same events as this.\n\nIf this stream is already a broadcast stream, it is returned unmodified.\n\nIf this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and will stay subscribed until this stream ends,\nor a callback cancels the subscription.\n\nIf [onListen] is provided, it is called with a subscription-like object\nthat represents the underlying subscription to this stream. It is\npossible to pause, resume or cancel the subscription during the call\nto [onListen]. It is not possible to change the event handlers, including\nusing [StreamSubscription.asFuture].\n\nIf [onCancel] is provided, it is called in a similar way to [onListen]\nwhen the returned stream stops having listener. If it later gets\na new listener, the [onListen] function is called again.\n\nUse the callbacks, for example, for pausing the underlying subscription\nwhile having no subscribers to prevent losing events, or canceling the\nsubscription when there are no listeners.\n","name":"asBroadcastStream","children":[{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"onListen","name":"onListen","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/StreamSubscription","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamSubscription"},"id":"subscription","uri":"dart-sdk/lib/async/stream.dart","name":"subscription","line":"179","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"179","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"onCancel","name":"onCancel","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/StreamSubscription","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamSubscription"},"id":"subscription","uri":"dart-sdk/lib/async/stream.dart","name":"subscription","line":"180","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"180","kind":"param"}],"line":"178","kind":"method"},{"returnType":{"refId":"dart.async/StreamSubscription","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamSubscription"},"id":"listen4()","comment":"\nAdds a subscription to this stream.\n\nOn each data event from this stream, the subscriber's [onData] handler\nis called. If [onData] is null, nothing happens.\n\nOn errors from this stream, the [onError] handler is given a\nobject describing the error.\n\nIf this stream closes, the [onDone] handler is called.\n\nIf [cancelOnError] is true, the subscription is ended when\nthe first error is reported. The default is false.\n","name":"listen","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"onData","name":"onData","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"event","uri":"dart-sdk/lib/async/stream.dart","name":"event","line":"199","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"onError","name":"onError","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"error","uri":"dart-sdk/lib/async/stream.dart","name":"error","line":"200","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"200","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"onDone","name":"onDone","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"line":"201","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"id":"cancelOnError","name":"cancelOnError","line":"202","kind":"param"}],"line":"199","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"where1()","comment":"\nCreates a new stream from this stream that discards some data events.\n\nThe new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the [test].\n","name":"where","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"event","uri":"dart-sdk/lib/async/stream.dart","name":"event","line":"210","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"210","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"id":"map1()","comment":"\nCreates a new stream that converts each element of this stream\nto a new value using the [convert] function.\n","name":"map","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"convert","name":"convert","children":[{"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"event","uri":"dart-sdk/lib/async/stream.dart","name":"event","line":"218","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"218","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"handleError2()","comment":"\nCreates a wrapper Stream that intercepts some errors from this stream.\n\nIf this stream sends an error that matches [test], then it is intercepted\nby the [handle] function.\n\nAn [AsyncError] [:e:] is matched by a test function if [:test(e):] returns\ntrue. If [test] is omitted, every error is considered matching.\n\nIf the error is intercepted, the [handle] function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.\n\nIf you need to transform an error into a data event, use the more generic\n[Stream.transformEvent] to handle the event by writing a data event to\nthe output sink\n","name":"handleError","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"handle","name":"handle","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"error","uri":"dart-sdk/lib/async/stream.dart","name":"error","line":"239","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"error","uri":"dart-sdk/lib/async/stream.dart","name":"error","line":"239","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"239","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"id":"expand1()","comment":"\nCreates a new stream from this stream that converts each element\ninto zero or more events.\n\nEach incoming event is converted to an [Iterable] of new events,\nand each of these new events are then sent by the returned stream\nin order.\n","name":"expand","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"convert","name":"convert","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"value","uri":"dart-sdk/lib/async/stream.dart","name":"value","line":"251","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"251","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"id":"pipe1()","comment":"\nBinds this stream as the input of the provided [StreamConsumer].\n","name":"pipe","children":[{"ref":{"refId":"dart.async/StreamConsumer","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamConsumer"},"id":"streamConsumer","name":"streamConsumer","kind":"param"}],"line":"258","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"id":"transform1()","comment":"\nChains this stream as the input of the provided [StreamTransformer].\n\nReturns the result of [:streamTransformer.bind:] itself.\n","name":"transform","children":[{"ref":{"refId":"dart.async/StreamTransformer","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"StreamTransformer"},"id":"streamTransformer","name":"streamTransformer","kind":"param"}],"line":"267","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"id":"reduce1()","comment":"\nReduces a sequence of values by repeatedly applying [combine].\n","name":"reduce","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"returnType":{"refId":"dart.async/Stream/T","name":"T"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"previous","uri":"dart-sdk/lib/async/stream.dart","name":"previous","line":"274","kind":"param"},{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"element","uri":"dart-sdk/lib/async/stream.dart","name":"element","line":"274","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"274","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"id":"fold2()","comment":"Reduces a sequence of values by repeatedly applying [combine]. ","name":"fold","children":[{"id":"initialValue","name":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"previous","uri":"dart-sdk/lib/async/stream.dart","name":"previous","line":"304","kind":"param"},{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"element","uri":"dart-sdk/lib/async/stream.dart","name":"element","line":"304","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"304","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Future"},"id":"join1()","comment":"\nCollects string of data events' string representations.\n\nIf [separator] is provided, it is inserted between any two\nelements.\n\nAny error in the stream causes the future to complete with that\nerror. Otherwise it completes with the collected string when\nthe \"done\" event arrives.\n","name":"join","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","id":"separator","name":"separator","kind":"param"}],"line":"336","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"contains1()","comment":"\nChecks whether [needle] occurs in the elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","name":"contains","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"needle","name":"needle","kind":"param"}],"line":"370","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"id":"forEach1()","comment":"\nExecutes [action] on each data event of the stream.\n\nCompletes the returned [Future] when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if [action] throws.\n","name":"forEach","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"action","name":"action","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"element","uri":"dart-sdk/lib/async/stream.dart","name":"element","line":"401","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"401","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"every1()","comment":"\nChecks whether [test] accepts all elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","name":"every","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"element","uri":"dart-sdk/lib/async/stream.dart","name":"element","line":"426","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"426","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"any1()","comment":"\nChecks whether [test] accepts any element provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","name":"any","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"element","uri":"dart-sdk/lib/async/stream.dart","name":"element","line":"456","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"456","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"List"}],"name":"Future"},"id":"toList0()","comment":"Collects the data of this stream in a [List]. ","name":"toList","line":"513","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/Set","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Set"}],"name":"Future"},"id":"toSet0()","comment":"Collects the data of this stream in a [Set]. ","name":"toSet","line":"529","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"id":"drain1()","comment":"\nDiscards all data on the stream, but signals when it's done or an error\noccured.\n\nWhen subscribing using [drain], cancelOnError will be true. This means\nthat the future will complete with the first error on the stream and then\ncancel the subscription.\n\nIn case of a `done` event the future completes with the given\n[futureValue].\n","name":"drain","children":[{"isOptional":true,"id":"futureValue","name":"futureValue","kind":"param"}],"line":"555","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"take1()","comment":"\nProvides at most the first [n] values of this stream.\n\nForwards the first [n] data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.\n\nIf this stream produces fewer than [count] values before it's done,\nso will the returned stream.\n","name":"take","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"count","name":"count","kind":"param"}],"line":"567","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"takeWhile1()","comment":"\nForwards data events while [test] is successful.\n\nThe returned stream provides the same events as this stream as long\nas [test] returns [:true:] for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that [test] doesn't accept.\n","name":"takeWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"element","uri":"dart-sdk/lib/async/stream.dart","name":"element","line":"579","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"579","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"skip1()","comment":"\nSkips the first [count] data events from this stream.\n","name":"skip","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"count","name":"count","kind":"param"}],"line":"586","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"skipWhile1()","comment":"\nSkip data events from this stream while they are matched by [test].\n\nError and done events are provided by the returned stream unmodified.\n\nStarting with the first data event where [test] returns true for the\nevent data, the returned stream will have the same events as this stream.\n","name":"skipWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"element","uri":"dart-sdk/lib/async/stream.dart","name":"element","line":"598","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"598","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"distinct1()","comment":"\nSkips data events if they are equal to the previous data event.\n\nThe returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.\n\nEquality is determined by the provided [equals] method. If that is\nomitted, the '==' operator on the last provided data element is used.\n","name":"distinct","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"equals","name":"equals","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"previous","uri":"dart-sdk/lib/async/stream.dart","name":"previous","line":"611","kind":"param"},{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"next","uri":"dart-sdk/lib/async/stream.dart","name":"next","line":"611","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"611","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[],"name":"Future"},"id":"firstWhere2()","comment":"\nFinds the first element of this stream matching [test].\n\nReturns a future that is filled with the first element of this stream\nthat [test] returns true for.\n\nIf no such element is found before this stream is done, and a\n[defaultValue] function is provided, the result of calling [defaultValue]\nbecomes the value of the future.\n\nIf an error occurs, or if this stream ends without finding a match and\nwith no [defaultValue] function provided, the future will receive an\nerror.\n","name":"firstWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"element","uri":"dart-sdk/lib/async/stream.dart","name":"element","line":"713","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"defaultValue","name":"defaultValue","children":[{"returnType":{"refId":"dart.core/Object","name":"Object"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"713","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[],"name":"Future"},"id":"lastWhere2()","comment":"\nFinds the last element in this stream matching [test].\n\nAs [firstWhere], except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.\n","name":"lastWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"element","uri":"dart-sdk/lib/async/stream.dart","name":"element","line":"748","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"defaultValue","name":"defaultValue","children":[{"returnType":{"refId":"dart.core/Object","name":"Object"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"748","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"id":"singleWhere1()","comment":"\nFinds the single element in this stream matching [test].\n\nLike [lastMatch], except that it is an error if more than one\nmatching element occurs in the stream.\n","name":"singleWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.async/Stream/T","name":"T"},"id":"element","uri":"dart-sdk/lib/async/stream.dart","name":"element","line":"788","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"788","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"id":"elementAt1()","comment":"\nReturns the value of the [index]th data event of this stream.\n\nIf an error event occurs, the future will end with this error.\n\nIf this stream provides fewer than [index] elements before closing,\nan error is reported.\n","name":"elementAt","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"832","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isBroadcast","comment":"\nReports whether this stream is a broadcast stream.\n","name":"isBroadcast","line":"152","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"Future"},"id":"length","comment":"Counts the elements in the stream. ","name":"length","line":"482","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"isEmpty","comment":"Reports whether this stream contains any elements. ","name":"isEmpty","line":"496","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"id":"first","comment":"\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","name":"first","line":"621","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"id":"last","comment":"\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","name":"last","line":"643","kind":"property"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"id":"single","comment":"\nReturns the single element.\n\nIf [this] is empty or has more than one element throws a [StateError].\n","name":"single","line":"670","kind":"property"},{"id":"0()","name":"","line":"56","kind":"constructor"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"fromFuture1()","comment":"\nCreates a new single-subscription stream from the future.\n\nWhen the future completes, the stream will fire one event, either\ndata or error, and then close with a done-event.\n","name":"fromFuture","children":[{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Future"},"id":"future","name":"future","kind":"param"}],"line":"64","kind":"constructor"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"fromIterable1()","comment":"\nCreates a single-subscription stream that gets its data from [data].\n\nIf iterating [data] throws an error, the stream ends immediately with\nthat error. No done event will be sent (iteration is not complete), but no\nfurther data events will be generated either, since iteration cannot\ncontinue.\n","name":"fromIterable","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Iterable"},"id":"data","name":"data","kind":"param"}],"line":"85","kind":"constructor"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/Stream/T","name":"T"}],"name":"Stream"},"id":"periodic2()","comment":"\nCreates a stream that repeatedly emits events at [period] intervals.\n\nThe event values are computed by invoking [computation]. The argument to\nthis callback is an integer that starts with 0 and is incremented for\nevery event.\n\nIf [computation] is omitted the event values will all be `null`.\n","name":"periodic","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"id":"period","name":"period","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"computation","name":"computation","children":[{"returnType":{"refId":"dart.async/Stream/T","name":"T"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"computationCount","uri":"dart-sdk/lib/async/stream.dart","name":"computationCount","line":"100","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"100","kind":"param"}],"line":"99","kind":"constructor"},{"id":"T","name":"T","kind":"typeparam"}],"line":"55","kind":"class"}],"line":"5","kind":"library"}],"id":"byte_stream","uri":"package:http/src/byte_stream.dart","name":"package:http/src/byte_stream.dart","children":[{"superclass":{"refId":"dart.async/StreamView","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"StreamView"},"id":"ByteStream","comment":"A stream of chunks of bytes representing a single piece of data.","name":"ByteStream","children":[{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.typed_data/Uint8List","name":"Uint8List"}],"name":"Future"},"id":"toBytes0()","comment":"Collects the data of this stream in a [Uint8List].","name":"toBytes","line":"24","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Future"},"id":"bytesToString1()","comment":"Collect the data of this stream in a [String], decoded according to\n[encoding], which defaults to `Encoding.UTF_8`.","name":"bytesToString","children":[{"ref":{"refId":"dart.io/Encoding","name":"Encoding"},"isOptional":true,"defaultValue":"Encoding.UTF_8","id":"encoding","name":"encoding","kind":"param"}],"line":"34","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Stream"},"id":"toStringStream1()","name":"toStringStream","children":[{"ref":{"refId":"dart.io/Encoding","name":"Encoding"},"isOptional":true,"defaultValue":"Encoding.UTF_8","id":"encoding","name":"encoding","kind":"param"}],"line":"37","kind":"method"},{"id":"1()","name":"","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"Stream"},"id":"stream","name":"stream","kind":"param"}],"line":"15","kind":"constructor"},{"returnType":{"refId":"byte_stream/ByteStream","name":"ByteStream"},"id":"fromBytes1()","comment":"Returns a single-subscription byte stream that will emit the given bytes\nin a single chunk.","name":"fromBytes","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"bytes","name":"bytes","kind":"param"}],"line":"20","kind":"constructor"}],"line":"14","kind":"class"}],"line":"5","kind":"library"}