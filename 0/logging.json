{"dependencies":[{"id":"dart.core","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"48","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"65","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Comparable","comment":"\nInterface used by types that have an intrinsic ordering.\n","uri":"dart-sdk/lib/core/comparable.dart","name":"Comparable","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"id":"compareTo1()","comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","name":"compareTo","children":[{"ref":{"refId":"dart.core/Comparable/T","name":"T"},"id":"other","name":"other","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"compare2()","comment":"\nCompare one comparable to another.\n\nThis utility function is used as the default comparator\nfor the [List] sort function.\n","name":"compare","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"id":"a","name":"a","kind":"param"},{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"id":"b","name":"b","kind":"param"}],"line":"43","kind":"method"},{"id":"T","name":"T","kind":"typeparam"}],"line":"26","kind":"class"}],"line":"5","kind":"library"}],"id":"logging","comment":"\nProvides APIs for debugging and error logging. This library introduces\nabstractions similar to those used in other languages, such as the Closure JS\nLogger and java.util.logging.Logger.\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your `pubspec.yaml`\nfile.\n\n    dependencies:\n      logging: any\n\nThen run `pub install`.\n\nFor more information, see the\n[logging package on pub.dartlang.org][pkg].\n\n[pub]: http://pub.dartlang.org\n[pkg]: http://pub.dartlang.org/packages/logging\n","uri":"package:logging/logging.dart","name":"package:logging/logging.dart","children":[{"ref":{"refId":"logging/Level","name":"Level"},"id":"_rootLevel","comment":"\nLevel for the root-logger. This will be the level of all loggers if\n[hierarchicalLoggingEnabled] is false.\n","name":"_rootLevel","isPrivate":true,"line":"40","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"hierarchicalLoggingEnabled","comment":"\nWhether to allow fine-grain logging and configuration of loggers in a\nhierarchy. When false, all logging is merged in the root logger.\n","name":"hierarchicalLoggingEnabled","line":"34","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"LogRecord","comment":"\nA log entry representation used to propagate information from [Logger] to\nindividual [Handler]s.\n","name":"LogRecord","children":[{"ref":{"refId":"logging/Level","name":"Level"},"isFinal":true,"id":"level","name":"level","line":"303","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"message","name":"message","line":"304","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"loggerName","comment":"Logger where this record is stored. ","name":"loggerName","line":"307","kind":"variable"},{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"isFinal":true,"id":"time","comment":"Time when this record was created. ","name":"time","line":"310","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"id":"sequenceNumber","comment":"Unique sequence number greater than all log records created before it. ","name":"sequenceNumber","line":"313","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"_nextNumber","name":"_nextNumber","isPrivate":true,"line":"315","kind":"variable"},{"id":"exception","comment":"Associated exception (if any) when recording errors messages. ","name":"exception","line":"318","kind":"variable"},{"id":"4()","name":"","children":[{"initializedField":{"refId":"logging/LogRecord/level","name":"level"},"ref":{"refId":"logging/Level","name":"Level"},"id":"level","name":"level","kind":"param"},{"initializedField":{"refId":"logging/LogRecord/message","name":"message"},"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"initializedField":{"refId":"logging/LogRecord/loggerName","name":"loggerName"},"ref":{"refId":"dart.core/String","name":"String"},"id":"loggerName","name":"loggerName","kind":"param"},{"initializedField":{"refId":"logging/LogRecord/exception","name":"exception"},"isOptional":true,"id":"exception","name":"exception","kind":"param"}],"line":"320","kind":"constructor"}],"line":"302","kind":"class"},{"interfaces":[{"refId":"dart.core/Comparable","arguments":[{"refId":"logging/Level","name":"Level"}],"name":"Comparable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Level","comment":"\n[Level]s to control logging output. Logging can be enabled to include all\nlevels above certain [Level]. [Level]s are ordered using an integer\nvalue [Level.value]. The predefined [Level] constants below are sorted as\nfollows (in descending order): [Level.SHOUT], [Level.SEVERE],\n[Level.WARNING], [Level.INFO], [Level.CONFIG], [Level.FINE], [Level.FINER],\n[Level.FINEST], and [Level.ALL].\n\nWe recommend using one of the predefined logging levels. If you define your\nown level, make sure you use a value between those used in [Level.ALL] and\n[Level.OFF].\n","name":"Level","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","name":"==","children":[{"ref":{"refId":"logging/Level","name":"Level"},"id":"other","name":"other","kind":"param"}],"line":"287","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"<1()","name":"<","children":[{"ref":{"refId":"logging/Level","name":"Level"},"id":"other","name":"other","kind":"param"}],"line":"288","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"<=1()","name":"<=","children":[{"ref":{"refId":"logging/Level","name":"Level"},"id":"other","name":"other","kind":"param"}],"line":"289","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":">1()","name":">","children":[{"ref":{"refId":"logging/Level","name":"Level"},"id":"other","name":"other","kind":"param"}],"line":"290","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":">=1()","name":">=","children":[{"ref":{"refId":"logging/Level","name":"Level"},"id":"other","name":"other","kind":"param"}],"line":"291","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"compareTo1()","name":"compareTo","children":[{"ref":{"refId":"logging/Level","name":"Level"},"id":"other","name":"other","kind":"param"}],"line":"292","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","name":"toString","line":"294","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","name":"hashCode","line":"293","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"name","name":"name","line":"247","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"id":"value","comment":"\nUnique value for this level. Used to order levels, so filtering can exclude\nmessages whose level is under certain value.\n","name":"value","line":"253","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"id":"ALL","comment":"Special key to turn on logging for all levels ([value] = 0). ","name":"ALL","line":"258","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"id":"OFF","comment":"Special key to turn off all logging ([value] = 2000). ","name":"OFF","line":"261","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"id":"FINEST","comment":"Key for highly detailed tracing ([value] = 300). ","name":"FINEST","line":"264","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"id":"FINER","comment":"Key for fairly detailed tracing ([value] = 400). ","name":"FINER","line":"267","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"id":"FINE","comment":"Key for tracing information ([value] = 500). ","name":"FINE","line":"270","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"id":"CONFIG","comment":"Key for static configuration messages ([value] = 700). ","name":"CONFIG","line":"273","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"id":"INFO","comment":"Key for informational messages ([value] = 800). ","name":"INFO","line":"276","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"id":"WARNING","comment":"Key for potential problems ([value] = 900). ","name":"WARNING","line":"279","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"id":"SEVERE","comment":"Key for serious failures ([value] = 1000). ","name":"SEVERE","line":"282","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"isStatic":true,"id":"SHOUT","comment":"Key for extra debugging loudness ([value] = 1200). ","name":"SHOUT","line":"285","kind":"variable"},{"id":"2()","name":"","children":[{"initializedField":{"refId":"logging/Level/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","kind":"param"},{"initializedField":{"refId":"logging/Level/value","name":"value"},"ref":{"refId":"dart.core/int","name":"int"},"id":"value","name":"value","kind":"param"}],"line":"255","kind":"constructor"}],"line":"244","kind":"class"},{"returnType":{"refId":"void","name":"void"},"id":"LoggerHandler","comment":"Handler callback to process log entries as they are added to a [Logger]. ","name":"LoggerHandler","children":[{"id":"LogRecord","name":"LogRecord","kind":"param"}],"line":"230","kind":"typedef"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Logger","comment":"\nUse a [Logger] to log debug messages. [Logger]s are named using a\nhierarchical dot-separated name convention.\n","name":"Logger","children":[{"isSetter":true,"id":"level=1()","comment":"Override the level for this particular [Logger] and its children. ","name":"level=","children":[{"ref":{"refId":"logging/Level","name":"Level"},"id":"value","name":"value","kind":"param"}],"line":"115","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clearListeners0()","name":"clearListeners","line":"135","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isLoggable1()","comment":"Whether a message for [value]'s level is loggable in this logger. ","name":"isLoggable","children":[{"ref":{"refId":"logging/Level","name":"Level"},"id":"value","name":"value","kind":"param"}],"line":"147","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"log3()","comment":"\nAdds a log record for a [message] at a particular [logLevel] if\n`isLoggable(logLevel)` is true. Use this method to create log entries for\nuser-defined levels. To record a message at a predefined level (e.g.\n[Level.INFO], [Level.WARNING], etc) you can use their specialized methods\ninstead (e.g. [info], [warning], etc).\n","name":"log","children":[{"ref":{"refId":"logging/Level","name":"Level"},"id":"logLevel","name":"logLevel","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"isOptional":true,"id":"exception","name":"exception","kind":"param"}],"line":"156","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"finest2()","comment":"Log message at level [Level.FINEST]. ","name":"finest","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"isOptional":true,"id":"exception","name":"exception","kind":"param"}],"line":"172","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"finer2()","comment":"Log message at level [Level.FINER]. ","name":"finer","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"isOptional":true,"id":"exception","name":"exception","kind":"param"}],"line":"176","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"fine2()","comment":"Log message at level [Level.FINE]. ","name":"fine","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"isOptional":true,"id":"exception","name":"exception","kind":"param"}],"line":"180","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"config2()","comment":"Log message at level [Level.CONFIG]. ","name":"config","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"isOptional":true,"id":"exception","name":"exception","kind":"param"}],"line":"184","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"info2()","comment":"Log message at level [Level.INFO]. ","name":"info","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"isOptional":true,"id":"exception","name":"exception","kind":"param"}],"line":"188","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"warning2()","comment":"Log message at level [Level.WARNING]. ","name":"warning","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"isOptional":true,"id":"exception","name":"exception","kind":"param"}],"line":"192","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"severe2()","comment":"Log message at level [Level.SEVERE]. ","name":"severe","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"isOptional":true,"id":"exception","name":"exception","kind":"param"}],"line":"196","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"shout2()","comment":"Log message at level [Level.SHOUT]. ","name":"shout","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"message","name":"message","kind":"param"},{"isOptional":true,"id":"exception","name":"exception","kind":"param"}],"line":"200","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"logging/LogRecord","name":"LogRecord"}],"name":"Stream"},"id":"_getStream0()","name":"_getStream","isPrivate":true,"line":"203","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_publish1()","name":"_publish","isPrivate":true,"children":[{"ref":{"refId":"logging/LogRecord","name":"LogRecord"},"id":"record","name":"record","kind":"param"}],"line":"215","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"fullName","comment":"The full name of this logger, which includes the parent's full name. ","name":"fullName","line":"52","kind":"property"},{"ref":{"refId":"logging/Level","name":"Level"},"id":"level","comment":"\nEffective level considering the levels established in this logger's parents\n(when [hierarchicalLoggingEnabled] is true).\n","name":"level","line":"106","kind":"property"},{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"logging/LogRecord","name":"LogRecord"}],"name":"Stream"},"id":"onRecord","comment":"\nReturns an stream of messages added to this [Logger]. You can listen for\nmessages using the standard stream APIs, for instance:\n   logger.onRecord.listen((record) { ... });\n","name":"onRecord","line":"133","kind":"property"},{"ref":{"refId":"logging/Logger","name":"Logger"},"isStatic":true,"id":"root","comment":"Top-level root [Logger]. ","name":"root","line":"222","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"name","comment":"Simple name of this logger. ","name":"name","line":"49","kind":"variable"},{"ref":{"refId":"logging/Logger","name":"Logger"},"isFinal":true,"id":"parent","comment":"Parent of this logger in the hierarchy of loggers. ","name":"parent","line":"56","kind":"variable"},{"ref":{"refId":"logging/Level","name":"Level"},"id":"_level","comment":"Logging [Level] used for entries generated on this logger. ","name":"_level","isPrivate":true,"line":"59","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"logging/Logger","name":"Logger"}],"name":"Map"},"id":"children","comment":"Children in the hierarchy of loggers, indexed by their simple names. ","name":"children","line":"62","kind":"variable"},{"ref":{"refId":"dart.async/StreamController","arguments":[{"refId":"logging/LogRecord","name":"LogRecord"}],"name":"StreamController"},"id":"_controller","comment":"Controller used to notify when log entries are added to this logger. ","name":"_controller","isPrivate":true,"line":"65","kind":"variable"},{"ref":{"refId":"dart.async/Stream","name":"Stream"},"id":"_stream","comment":"The broadcast stream associated with the controller. ","name":"_stream","isPrivate":true,"line":"68","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"logging/Logger","name":"Logger"}],"name":"Map"},"isStatic":true,"id":"_loggers","comment":"All [Logger]s in the system. ","name":"_loggers","isPrivate":true,"line":"225","kind":"variable"},{"returnType":{"refId":"logging/Logger","name":"Logger"},"id":"1()","comment":"\nSingleton constructor. Calling `new Logger(name)` will return the same\nactual instance whenever it is called with the same string name.\n","name":"","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","kind":"param"}],"line":"74","kind":"constructor"},{"id":"_internal2()","name":"_internal","isPrivate":true,"children":[{"initializedField":{"refId":"logging/Logger/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","kind":"param"},{"initializedField":{"refId":"logging/Logger/parent","name":"parent"},"ref":{"refId":"logging/Logger","name":"Logger"},"id":"parent","name":"parent","kind":"param"}],"line":"97","kind":"constructor"}],"line":"47","kind":"class"}],"line":"26","kind":"library"}