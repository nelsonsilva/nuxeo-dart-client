{"dependencies":[{"id":"dart.core","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"48","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"65","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"id":"path","comment":"A comprehensive, cross-platform path manipulation library.\n\n## Installing ##\n\nUse [pub][] to install this package. Add the following to your\n`pubspec.yaml` file.\n\n    dependencies:\n      pathos: any\n\nThen run `pub install`.\n\nFor more information, see the\n[pathos package on pub.dartlang.org][pkg].\n\n[pub]: http://pub.dartlang.org\n[pkg]: http://pub.dartlang.org/packages/pathos","uri":"package:pathos/path.dart","name":"package:pathos/path.dart","children":[{"id":"_validateArgList2()","comment":"Validates that there are no non-null arguments following a null one and\nthrows an appropriate [ArgumentError] on failure.","name":"_validateArgList","isPrivate":true,"children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"method","name":"method","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"args","name":"args","kind":"param"}],"line":"280","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"withoutExtension1()","comment":"Removes a trailing extension from the last part of [path].\n\n    withoutExtension('path/to/foo.dart'); // -> 'path/to/foo'","name":"withoutExtension","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"276","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"relative2()","comment":"Attempts to convert [path] to an equivalent relative path from the current\ndirectory.\n\n    // Given current directory is /root/path:\n    path.relative('/root/path/a/b.dart'); // -> 'a/b.dart'\n    path.relative('/root/other.dart'); // -> '../other.dart'\n\nIf the [from] argument is passed, [path] is made relative to that instead.\n\n    path.relative('/root/path/a/b.dart',\n        from: '/root/path'); // -> 'a/b.dart'\n    path.relative('/root/other.dart',\n        from: '/root/path'); // -> '../other.dart'\n\nSince there is no relative path from one drive letter to another on Windows,\nor from one hostname to another for URLs, this will return an absolute path\nin those cases.\n\n    // Windows\n    path.relative(r'D:\\other', from: r'C:\\home'); // -> 'D:\\other'\n\n    // URL\n    path.relative('http://dartlang.org', from: 'http://pub.dartlang.org');\n      // -> 'http://dartlang.org'","name":"relative","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"from","name":"from","kind":"param"}],"line":"270","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"normalize1()","comment":"Normalizes [path], simplifying it by handling `..`, and `.`, and\nremoving redundant path separators whenever possible.\n\n    path.normalize('path/./to/..//file.text'); // -> 'path/file.txt'","name":"normalize","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"244","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"split1()","comment":"Splits [path] into its components using the current platform's [separator].\n\n    path.split('path/to/foo'); // -> ['path', 'to', 'foo']\n\nThe path will *not* be normalized before splitting.\n\n    path.split('path/../foo'); // -> ['path', '..', 'foo']\n\nIf [path] is absolute, the root directory will be the first element in the\narray. Example:\n\n    // Unix\n    path.split('/path/to/foo'); // -> ['/', 'path', 'to', 'foo']\n\n    // Windows\n    path.split(r'C:\\path\\to\\foo'); // -> [r'C:\\', 'path', 'to', 'foo']\n\n    // Browser\n    path.split('http://dartlang.org/path/to/foo');\n      // -> ['http://dartlang.org', 'path', 'to', 'foo']","name":"split","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"238","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"joinAll1()","comment":"Joins the given path parts into a single path using the current platform's\n[separator]. Example:\n\n    path.joinAll(['path', 'to', 'foo']); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    path.joinAll(['path/', 'to', 'foo']); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    path.joinAll(['path', '/to', 'foo']); // -> '/to/foo'\n\nFor a fixed number of parts, [join] is usually terser.","name":"joinAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"id":"parts","name":"parts","kind":"param"}],"line":"215","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"join8()","comment":"Joins the given path parts into a single path using the current platform's\n[separator]. Example:\n\n    path.join('path', 'to', 'foo'); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    path.join('path/', 'to', 'foo'); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    path.join('path', '/to', 'foo'); // -> '/to/foo'","name":"join","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"part1","name":"part1","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part2","name":"part2","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part3","name":"part3","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part4","name":"part4","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part5","name":"part5","line":"197","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part6","name":"part6","line":"197","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part7","name":"part7","line":"197","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part8","name":"part8","line":"197","kind":"param"}],"line":"196","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isRootRelative1()","comment":"Returns `true` if [path] is a root-relative path and `false` if it's not.\n\nURLs that start with `/` are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are still\nabsolute in every other sense, [isAbsolute] will return true for them. They\ncan be detected using [isRootRelative].\n\nNo POSIX and Windows paths are root-relative.","name":"isRootRelative","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"181","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isRelative1()","comment":"Returns `true` if [path] is a relative path and `false` if it is absolute.\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`.","name":"isRelative","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"171","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isAbsolute1()","comment":"Returns `true` if [path] is an absolute path and `false` if it is a\nrelative path.\n\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`. For URLs, absolute paths either start with a protocol and\noptional hostname (e.g. `http://dartlang.org`, `file://`) or with a `/`.\n\nURLs that start with `/` are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are still\nabsolute in every other sense, [isAbsolute] will return true for them. They\ncan be detected using [isRootRelative].","name":"isAbsolute","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"165","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"rootPrefix1()","comment":"Returns the root of [path], if it's absolute, or the empty string if it's\nrelative.\n\n    // Unix\n    path.rootPrefix('path/to/foo'); // -> ''\n    path.rootPrefix('/path/to/foo'); // -> '/'\n\n    // Windows\n    path.rootPrefix(r'path\\to\\foo'); // -> ''\n    path.rootPrefix(r'C:\\path\\to\\foo'); // -> r'C:\\'\n\n    // URL\n    path.rootPrefix('path/to/foo'); // -> ''\n    path.rootPrefix('http://dartlang.org/path/to/foo');\n      // -> 'http://dartlang.org'","name":"rootPrefix","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"151","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"extension1()","comment":"Gets the file extension of [path]: the portion of [basename] from the last\n`.` to the end (including the `.` itself).\n\n    path.extension('path/to/foo.dart');    // -> '.dart'\n    path.extension('path/to/foo');         // -> ''\n    path.extension('path.to/foo');         // -> ''\n    path.extension('path/to/foo.dart.js'); // -> '.js'\n\nIf the file name starts with a `.`, then that is not considered the\nextension:\n\n    path.extension('~/.bashrc');    // -> ''\n    path.extension('~/.notes.txt'); // -> '.txt'","name":"extension","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"dirname1()","comment":"Gets the part of [path] before the last separator.\n\n    path.dirname('path/to/foo.dart'); // -> 'path/to'\n    path.dirname('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.dirname('path/to/'); // -> 'path'","name":"dirname","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"118","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"basenameWithoutExtension1()","comment":"Gets the part of [path] after the last separator, and without any trailing\nfile extension.\n\n    path.basenameWithoutExtension('path/to/foo.dart'); // -> 'foo'\n\nTrailing separators are ignored.\n\n    builder.basenameWithoutExtension('path/to/foo.dart/'); // -> 'foo'","name":"basenameWithoutExtension","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"107","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"basename1()","comment":"Gets the part of [path] after the last separator.\n\n    path.basename('path/to/foo.dart'); // -> 'foo.dart'\n    path.basename('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.basename('path/to/'); // -> 'to'","name":"basename","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"97","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"absolute1()","comment":"Converts [path] to an absolute path by resolving it relative to the current\nworking directory. If [path] is already an absolute path, just returns it.\n\n    path.absolute('foo/bar.txt'); // -> /your/current/dir/foo/bar.txt","name":"absolute","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"87","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"separator0()","comment":"Gets the path separator for the current platform. On Mac and Linux, this\nis `/`. On Windows, it's `\\`.","name":"separator","line":"81","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"current0()","comment":"Gets the path to the current working directory.\n\nIn the browser, this means the current URL. When using dart2js, this\ncurrently returns `.` due to technical constraints. In the future, it will\nreturn the current URL.","name":"current","line":"67","kind":"method"},{"returnType":{"refId":"dart.mirrors/LibraryMirror","name":"LibraryMirror"},"id":"_html0()","comment":"If we're running in Dartium, this will return a [LibraryMirror] that gives\naccess to the `dart:html` library.\n\nIf `dart:html` is not available, this returns null.","name":"_html","isPrivate":true,"line":"54","kind":"method"},{"returnType":{"refId":"dart.mirrors/LibraryMirror","name":"LibraryMirror"},"id":"_io0()","comment":"If we're running in the server-side Dart VM, this will return a\n[LibraryMirror] that gives access to the `dart:io` library.\n\nIf `dart:io` is not available, this returns null.","name":"_io","isPrivate":true,"line":"41","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_growListFront3()","comment":"\nInserts [length] elements in front of the [list] and fills them with the\n[fillValue].\n","name":"_growListFront","isPrivate":true,"children":[{"ref":{"refId":"dart.core/List","name":"List"},"id":"list","name":"list","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","kind":"param"},{"id":"fillValue","name":"fillValue","kind":"param"}],"line":"34","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"separator","comment":"Gets the path separator for the current platform. On Mac and Linux, this\nis `/`. On Windows, it's `\\`.","name":"separator","line":"81","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"current","comment":"Gets the path to the current working directory.\n\nIn the browser, this means the current URL. When using dart2js, this\ncurrently returns `.` due to technical constraints. In the future, it will\nreturn the current URL.","name":"current","line":"67","kind":"property"},{"ref":{"refId":"dart.mirrors/LibraryMirror","name":"LibraryMirror"},"id":"_html","comment":"If we're running in Dartium, this will return a [LibraryMirror] that gives\naccess to the `dart:html` library.\n\nIf `dart:html` is not available, this returns null.","name":"_html","isPrivate":true,"line":"54","kind":"property"},{"ref":{"refId":"dart.mirrors/LibraryMirror","name":"LibraryMirror"},"id":"_io","comment":"If we're running in the server-side Dart VM, this will return a\n[LibraryMirror] that gives access to the `dart:io` library.\n\nIf `dart:io` is not available, this returns null.","name":"_io","isPrivate":true,"line":"41","kind":"property"},{"isFinal":true,"id":"_builder","comment":"An internal builder for the current OS so we can provide a straight\nfunctional interface and not require users to create one.","name":"_builder","isPrivate":true,"line":"28","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_ParsedPath","name":"_ParsedPath","isPrivate":true,"children":[{"returnType":{"refId":"void","name":"void"},"id":"removeTrailingSeparators0()","name":"removeTrailingSeparators","line":"851","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"normalize0()","name":"normalize","line":"859","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","name":"toString","line":"907","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"_splitExtension0()","comment":"Splits the last part of the path into a two-element list. The first is\nthe name of the file without any extension. The second is the extension\nor \"\" if it has none.","name":"_splitExtension","isPrivate":true,"line":"922","kind":"method"},{"returnType":{"refId":"path/_ParsedPath","name":"_ParsedPath"},"id":"clone0()","name":"clone","line":"937","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"extension","comment":"The file extension of the last part, or \"\" if it doesn't have one.","name":"extension","line":"829","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isAbsolute","comment":"`true` if this is an absolute path.","name":"isAbsolute","line":"832","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"basename","name":"basename","line":"837","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"basenameWithoutExtension","name":"basenameWithoutExtension","line":"844","kind":"property"},{"ref":{"refId":"path/Style","name":"Style"},"id":"style","comment":"The [Style] that was used to parse this path.","name":"style","line":"804","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"root","comment":"The absolute root portion of the path, or `null` if the path is relative.\nOn POSIX systems, this will be `null` or \"/\". On Windows, it can be\n`null`, \"//\" for a UNC path, or something like \"C:\\\" for paths with drive\nletters.","name":"root","line":"810","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isRootRelative","comment":"Whether this path is root-relative.\n\nSee [Builder.isRootRelative].","name":"isRootRelative","line":"815","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"parts","comment":"The path-separated parts of the path. All but the last will be\ndirectories.","name":"parts","line":"819","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"separators","comment":"The path separators preceding each part.\n\nThe first one will be an empty string unless the root requires a separator\nbetween it and the path. The last one will be an empty string unless the\npath ends with a trailing separator.","name":"separators","line":"826","kind":"variable"},{"id":"5()","name":"","children":[{"initializedField":{"refId":"path/_ParsedPath/style","name":"style"},"ref":{"refId":"path/Style","name":"Style"},"id":"style","name":"style","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/root","name":"root"},"ref":{"refId":"dart.core/String","name":"String"},"id":"root","name":"root","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/isRootRelative","name":"isRootRelative"},"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isRootRelative","name":"isRootRelative","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/parts","name":"parts"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"parts","name":"parts","kind":"param"},{"initializedField":{"refId":"path/_ParsedPath/separators","name":"separators"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"separators","name":"separators","line":"835","kind":"param"}],"line":"834","kind":"constructor"}],"line":"802","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Style","comment":"An enum type describing a \"flavor\" of path.","name":"Style","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"id":"getRoot1()","comment":"Gets the root prefix of [path] if path is absolute. If [path] is relative,\nreturns `null`.","name":"getRoot","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"782","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"getRelativeRoot1()","comment":"Gets the root prefix of [path] if it's root-relative.\n\nIf [path] is relative or absolute and not root-relative, returns `null`.","name":"getRelativeRoot","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"791","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","name":"toString","line":"798","kind":"method"},{"isFinal":true,"isStatic":true,"id":"posix","comment":"POSIX-style paths use \"/\" (forward slash) as separators. Absolute paths\nstart with \"/\". Used by UNIX, Linux, Mac OS X, and others.","name":"posix","line":"717","kind":"variable"},{"isFinal":true,"isStatic":true,"id":"windows","comment":"Windows paths use \"\\\" (backslash) as separators. Absolute paths start with\na drive letter followed by a colon (example, \"C:\") or two backslashes\n(\"\\\\\") for UNC paths.","name":"windows","line":"724","kind":"variable"},{"isFinal":true,"isStatic":true,"id":"url","comment":"URLs aren't filesystem paths, but they're supported by Pathos to make it\neasier to manipulate URL paths in the browser.\n\nURLs use \"/\" (forward slash) as separators. Absolute paths either start\nwith a protocol and optional hostname (e.g. `http://dartlang.org`,\n`file://`) or with \"/\".","name":"url","line":"733","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"name","comment":"The name of this path style. Will be \"posix\" or \"windows\".","name":"name","line":"747","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"separator","comment":"The path separator for this style. On POSIX, this is `/`. On Windows,\nit's `\\`.","name":"separator","line":"751","kind":"variable"},{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"isFinal":true,"id":"separatorPattern","comment":"The [Pattern] that can be used to match a separator for a path in this\nstyle. Windows allows both \"/\" and \"\\\" as path separators even though\n\"\\\" is the canonical one.","name":"separatorPattern","line":"756","kind":"variable"},{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"isFinal":true,"id":"needsSeparatorPattern","comment":"The [Pattern] that matches path components that need a separator after\nthem.\n\nWindows and POSIX styles just need separators when the previous component\ndoesn't already end in a separator, but the URL always needs to place a\nseparator between the root and the first component, even if the root\nalready ends in a separator character. For example, to join \"file://\" and\n\"usr\", an additional \"/\" is needed (making \"file:///usr\").","name":"needsSeparatorPattern","line":"766","kind":"variable"},{"ref":{"refId":"dart.core/RegExp","name":"RegExp"},"isFinal":true,"id":"_rootPattern","comment":"The [RegExp] that can be used to match the root prefix of an absolute\npath in this style.","name":"_rootPattern","isPrivate":true,"line":"771","kind":"variable"},{"ref":{"refId":"dart.core/RegExp","name":"RegExp"},"isFinal":true,"id":"_relativeRootPattern","comment":"The [RegExp] that can be used to match the root prefix of a root-relative\npath in this style.\n\nThis can be null to indicate that this style doesn't support root-relative\npaths.","name":"_relativeRootPattern","isPrivate":true,"line":"778","kind":"variable"},{"id":"_6()","name":"_","isPrivate":true,"children":[{"initializedField":{"refId":"path/Style/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"id":"name","name":"name","kind":"param"},{"initializedField":{"refId":"path/Style/separator","name":"separator"},"ref":{"refId":"dart.core/String","name":"String"},"id":"separator","name":"separator","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"separatorPattern","name":"separatorPattern","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"needsSeparatorPattern","name":"needsSeparatorPattern","line":"738","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"rootPattern","name":"rootPattern","line":"738","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"relativeRootPattern","name":"relativeRootPattern","line":"739","kind":"param"}],"line":"737","kind":"constructor"}],"line":"714","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Builder","comment":"An instantiable class for manipulating paths. Unlike the top-level\nfunctions, this lets you explicitly select what platform the paths will use.","name":"Builder","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"id":"basename1()","comment":"Gets the part of [path] after the last separator on the builder's\nplatform.\n\n    builder.basename('path/to/foo.dart'); // -> 'foo.dart'\n    builder.basename('path/to');          // -> 'to'\n\nTrailing separators are ignored.\n\n    builder.basename('path/to/'); // -> 'to'","name":"basename","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"351","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"basenameWithoutExtension1()","comment":"Gets the part of [path] after the last separator on the builder's\nplatform, and without any trailing file extension.\n\n    builder.basenameWithoutExtension('path/to/foo.dart'); // -> 'foo'\n\nTrailing separators are ignored.\n\n    builder.basenameWithoutExtension('path/to/foo.dart/'); // -> 'foo'","name":"basenameWithoutExtension","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"361","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"dirname1()","comment":"Gets the part of [path] before the last separator.\n\n    builder.dirname('path/to/foo.dart'); // -> 'path/to'\n    builder.dirname('path/to');          // -> 'path'\n\nTrailing separators are ignored.\n\n    builder.dirname('path/to/'); // -> 'path'","name":"dirname","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"372","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"extension1()","comment":"Gets the file extension of [path]: the portion of [basename] from the last\n`.` to the end (including the `.` itself).\n\n    builder.extension('path/to/foo.dart'); // -> '.dart'\n    builder.extension('path/to/foo'); // -> ''\n    builder.extension('path.to/foo'); // -> ''\n    builder.extension('path/to/foo.dart.js'); // -> '.js'\n\nIf the file name starts with a `.`, then it is not considered an\nextension:\n\n    builder.extension('~/.bashrc');    // -> ''\n    builder.extension('~/.notes.txt'); // -> '.txt'","name":"extension","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"398","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"rootPrefix1()","comment":"Returns the root of [path], if it's absolute, or an empty string if it's\nrelative.\n\n    // Unix\n    builder.rootPrefix('path/to/foo'); // -> ''\n    builder.rootPrefix('/path/to/foo'); // -> '/'\n\n    // Windows\n    builder.rootPrefix(r'path\\to\\foo'); // -> ''\n    builder.rootPrefix(r'C:\\path\\to\\foo'); // -> r'C:\\'\n\n    // URL\n    builder.rootPrefix('path/to/foo'); // -> ''\n    builder.rootPrefix('http://dartlang.org/path/to/foo');\n      // -> 'http://dartlang.org'","name":"rootPrefix","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"416","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isAbsolute1()","comment":"Returns `true` if [path] is an absolute path and `false` if it is a\nrelative path.\n\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`. For URLs, absolute paths either start with a protocol and\noptional hostname (e.g. `http://dartlang.org`, `file://`) or with a `/`.\n\nURLs that start with `/` are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are\nstill absolute in every other sense, [isAbsolute] will return true for\nthem. They can be detected using [isRootRelative].","name":"isAbsolute","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"433","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isRelative1()","comment":"Returns `true` if [path] is a relative path and `false` if it is absolute.\nOn POSIX systems, absolute paths start with a `/` (forward slash). On\nWindows, an absolute path starts with `\\\\`, or a drive letter followed by\n`:/` or `:\\`.","name":"isRelative","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"439","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isRootRelative1()","comment":"Returns `true` if [path] is a root-relative path and `false` if it's not.\n\nURLs that start with `/` are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are\nstill absolute in every other sense, [isAbsolute] will return true for\nthem. They can be detected using [isRootRelative].\n\nNo POSIX and Windows paths are root-relative.","name":"isRootRelative","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"449","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"join8()","comment":"Joins the given path parts into a single path. Example:\n\n    builder.join('path', 'to', 'foo'); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    builder.join('path/', 'to', 'foo'); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    builder.join('path', '/to', 'foo'); // -> '/to/foo'\n","name":"join","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"part1","name":"part1","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part2","name":"part2","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part3","name":"part3","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part4","name":"part4","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part5","name":"part5","line":"465","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part6","name":"part6","line":"465","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part7","name":"part7","line":"465","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part8","name":"part8","line":"465","kind":"param"}],"line":"464","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"joinAll1()","comment":"Joins the given path parts into a single path. Example:\n\n    builder.joinAll(['path', 'to', 'foo']); // -> 'path/to/foo'\n\nIf any part ends in a path separator, then a redundant separator will not\nbe added:\n\n    builder.joinAll(['path/', 'to', 'foo']); // -> 'path/to/foo\n\nIf a part is an absolute path, then anything before that will be ignored:\n\n    builder.joinAll(['path', '/to', 'foo']); // -> '/to/foo'\n\nFor a fixed number of parts, [join] is usually terser.","name":"joinAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"id":"parts","name":"parts","kind":"param"}],"line":"485","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"split1()","comment":"Splits [path] into its components using the current platform's\n[separator]. Example:\n\n    builder.split('path/to/foo'); // -> ['path', 'to', 'foo']\n\nThe path will *not* be normalized before splitting.\n\n    builder.split('path/../foo'); // -> ['path', '..', 'foo']\n\nIf [path] is absolute, the root directory will be the first element in the\narray. Example:\n\n    // Unix\n    builder.split('/path/to/foo'); // -> ['/', 'path', 'to', 'foo']\n\n    // Windows\n    builder.split(r'C:\\path\\to\\foo'); // -> [r'C:\\', 'path', 'to', 'foo']","name":"split","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"539","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"normalize1()","comment":"Normalizes [path], simplifying it by handling `..`, and `.`, and\nremoving redundant path separators whenever possible.\n\n    builder.normalize('path/./to/..//file.text'); // -> 'path/file.txt'","name":"normalize","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"552","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"resolve7()","comment":"Creates a new path by appending the given path parts to the [root].\nEquivalent to [join()] with [root] as the first argument. Example:\n\n    var builder = new Builder(root: 'root');\n    builder.resolve('path', 'to', 'foo'); // -> 'root/path/to/foo'","name":"resolve","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"part1","name":"part1","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part2","name":"part2","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part3","name":"part3","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part4","name":"part4","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part5","name":"part5","line":"566","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part6","name":"part6","line":"566","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"part7","name":"part7","line":"566","kind":"param"}],"line":"565","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"relative2()","comment":"Attempts to convert [path] to an equivalent relative path relative to\n[root].\n\n    var builder = new Builder(root: '/root/path');\n    builder.relative('/root/path/a/b.dart'); // -> 'a/b.dart'\n    builder.relative('/root/other.dart'); // -> '../other.dart'\n\nIf the [from] argument is passed, [path] is made relative to that instead.\n\n    builder.relative('/root/path/a/b.dart',\n        from: '/root/path'); // -> 'a/b.dart'\n    builder.relative('/root/other.dart',\n        from: '/root/path'); // -> '../other.dart'\n\nSince there is no relative path from one drive letter to another on\nWindows, this will return an absolute path in that case.\n\n    builder.relative(r'D:\\other', from: r'C:\\other'); // -> 'D:\\other'\n\nThis will also return an absolute path if an absolute [path] is passed to\na builder with a relative [root].\n\n    var builder = new Builder(r'some/relative/path');\n    builder.relative(r'/absolute/path'); // -> '/absolute/path'","name":"relative","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"from","name":"from","kind":"param"}],"line":"594","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"withoutExtension1()","comment":"Removes a trailing extension from the last part of [path].\n\n    builder.withoutExtension('path/to/foo.dart'); // -> 'path/to/foo'","name":"withoutExtension","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"663","kind":"method"},{"returnType":{"refId":"path/_ParsedPath","name":"_ParsedPath"},"id":"_parse1()","name":"_parse","isPrivate":true,"children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"path","name":"path","kind":"param"}],"line":"676","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"separator","comment":"Gets the path separator for the builder's [style]. On Mac and Linux,\nthis is `/`. On Windows, it's `\\`.","name":"separator","line":"340","kind":"property"},{"ref":{"refId":"path/Style","name":"Style"},"isFinal":true,"id":"style","comment":"The style of path that this builder works with.","name":"style","line":"333","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"id":"root","comment":"The root directory that relative paths will be relative to.","name":"root","line":"336","kind":"variable"},{"returnType":{"refId":"path/Builder","name":"Builder"},"id":"2()","comment":"Creates a new path builder for the given style and root directory.\n\nIf [style] is omitted, it uses the host operating system's path style. If\n[root] is omitted, it defaults to the current working directory. If [root]\nis relative, it is considered relative to the current working directory.\n\nOn the browser, the path style is [Style.url]. In Dartium, [root] defaults\nto the current URL. When using dart2js, it currently defaults to `.` due\nto technical constraints.","name":"","children":[{"isNamed":true,"ref":{"refId":"path/Style","name":"Style"},"isOptional":true,"id":"style","name":"style","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"root","name":"root","kind":"param"}],"line":"313","kind":"constructor"},{"id":"_2()","name":"_","isPrivate":true,"children":[{"initializedField":{"refId":"path/Builder/style","name":"style"},"ref":{"refId":"path/Style","name":"Style"},"id":"style","name":"style","kind":"param"},{"initializedField":{"refId":"path/Builder/root","name":"root"},"ref":{"refId":"dart.core/String","name":"String"},"id":"root","name":"root","kind":"param"}],"line":"330","kind":"constructor"}],"line":"303","kind":"class"}],"line":"22","kind":"library"}