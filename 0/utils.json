{"dependencies":[{"id":"dart.core","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"48","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"65","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"id":"utils","uri":"package:http/src/utils.dart","name":"package:http/src/utils.dart","children":[{"returnType":{"refId":"dart.async/Future","name":"Future"},"id":"forEachFuture2()","comment":"Runs [fn] for each element in [input] in order, moving to the next element\nonly when the [Future] returned by [fn] completes. Returns a [Future] that\ncompletes when all elements have been processed.\n\nThe return values of all [Future]s are discarded. Any errors will cause the\niteration to stop and will be piped through the return value.","name":"forEachFuture","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"input","name":"input","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"fn","name":"fn","children":[{"returnType":{"refId":"dart.async/Future","name":"Future"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"element","uri":"package:http/src/utils.dart","name":"element","line":"229","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"229","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"chainToCompleter2()","comment":"Configures [future] so that its result (success or exception) is passed on\nto [completer].","name":"chainToCompleter","children":[{"ref":{"refId":"dart.async/Future","name":"Future"},"id":"future","name":"future","kind":"param"},{"ref":{"refId":"dart.async/Completer","name":"Completer"},"id":"completer","name":"completer","kind":"param"}],"line":"215","kind":"method"},{"returnType":{"refId":"utils/Pair","arguments":[{"refId":"dart.async/Stream","name":"Stream"},{"refId":"dart.async/Stream","name":"Stream"}],"name":"Pair"},"id":"tee1()","comment":"Creates two single-subscription [Stream]s that each emit all values and\nerrors from [stream]. This is useful if [stream] is single-subscription but\nmultiple subscribers are necessary.","name":"tee","children":[{"ref":{"refId":"dart.async/Stream","name":"Stream"},"id":"stream","name":"stream","kind":"param"}],"line":"180","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"id":"streamFromIterable1()","comment":"Creates a single-subscription stream that emits the items in [iter] and then\nends.","name":"streamFromIterable","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"iter","name":"iter","kind":"param"}],"line":"169","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"id":"emptyStream0()","comment":"Returns a closed [Stream] with no elements.","name":"emptyStream","line":"165","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"id":"async0()","comment":"Returns a [Future] that asynchronously completes to `null`.","name":"async","line":"162","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"id":"writeStreamToSink2()","comment":"Pipes all data and errors from [stream] into [sink]. Completes [Future] once\n[stream] is done. Unlike [store], [sink] remains open after [stream] is\ndone.","name":"writeStreamToSink","children":[{"ref":{"refId":"dart.async/Stream","name":"Stream"},"id":"stream","name":"stream","kind":"param"},{"ref":{"refId":"dart.async/EventSink","name":"EventSink"},"id":"sink","name":"sink","kind":"param"}],"line":"153","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"id":"store2()","comment":"Pipes all data and errors from [stream] into [sink]. When [stream] is done,\n[sink] is closed and the returned [Future] is completed.","name":"store","children":[{"ref":{"refId":"dart.async/Stream","name":"Stream"},"id":"stream","name":"stream","kind":"param"},{"ref":{"refId":"dart.async/EventSink","name":"EventSink"},"id":"sink","name":"sink","kind":"param"}],"line":"139","kind":"method"},{"returnType":{"refId":"dart.async/Stream","name":"Stream"},"id":"onDone2()","comment":"Calls [onDone] once [stream] (a single-subscription [Stream]) is finished.\nThe return value, also a single-subscription [Stream] should be used in\nplace of [stream] after calling this method.","name":"onDone","children":[{"ref":{"refId":"dart.async/Stream","name":"Stream"},"id":"stream","name":"stream","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"onDone","name":"onDone","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"130","kind":"method"},{"returnType":{"refId":"byte_stream/ByteStream","name":"ByteStream"},"id":"toByteStream1()","comment":"If [stream] is already a [ByteStream], returns it. Otherwise, wraps it in a\n[ByteStream].","name":"toByteStream","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"Stream"},"id":"stream","name":"stream","kind":"param"}],"line":"122","kind":"method"},{"returnType":{"refId":"dart.typed_data/Uint8List","name":"Uint8List"},"id":"toUint8List1()","comment":"Converts [input] into a [Uint8List]. If [input] is a [TypedData], this just\nreturns a view on [input].","name":"toUint8List","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"input","name":"input","kind":"param"}],"line":"109","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isPlainAscii1()","comment":"Returns whether [string] is composed entirely of ASCII-compatible\ncharacters.","name":"isPlainAscii","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"string","name":"string","kind":"param"}],"line":"105","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"encodeString2()","comment":"Converts [string] into a byte array according to [encoding].","name":"encodeString","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"string","name":"string","kind":"param"},{"ref":{"refId":"dart.io/Encoding","name":"Encoding"},"id":"encoding","name":"encoding","kind":"param"}],"line":"94","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"decodeString2()","comment":"Converts [bytes] into a [String] according to [encoding].","name":"decodeString","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"id":"bytes","name":"bytes","kind":"param"},{"ref":{"refId":"dart.io/Encoding","name":"Encoding"},"id":"encoding","name":"encoding","kind":"param"}],"line":"88","kind":"method"},{"returnType":{"refId":"dart.io/Encoding","name":"Encoding"},"id":"requiredEncodingForCharset1()","comment":"Returns the [Encoding] that corresponds to [charset]. Throws a\n[FormatException] if no [Encoding] was found that corresponds to [charset].\n[charset] may not be null.","name":"requiredEncodingForCharset","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"charset","name":"charset","kind":"param"}],"line":"81","kind":"method"},{"returnType":{"refId":"dart.io/Encoding","name":"Encoding"},"id":"encodingForCharset2()","comment":"Returns the [Encoding] that corresponds to [charset]. Returns [fallback] if\n[charset] is null or if no [Encoding] was found that corresponds to\n[charset].","name":"encodingForCharset","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"charset","name":"charset","line":"71","kind":"param"},{"ref":{"refId":"dart.io/Encoding","name":"Encoding"},"isOptional":true,"defaultValue":"Encoding.ISO_8859_1","id":"fallback","name":"fallback","line":"71","kind":"param"}],"line":"70","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"split12()","comment":"Like [String.split], but only splits on the first occurrence of the pattern.\nThis will always return an array of two elements or fewer.\n\n    split1(\"foo,bar,baz\", \",\"); //=> [\"foo\", \"bar,baz\"]\n    split1(\"foo\", \",\"); //=> [\"foo\"]\n    split1(\"\", \",\"); //=> []","name":"split1","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"toSplit","name":"toSplit","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"pattern","name":"pattern","kind":"param"}],"line":"56","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"urlDecode1()","comment":"Decodes a URL-encoded string. Unlike [Uri.decodeComponent], this includes\nreplacing `+` with ` `.","name":"urlDecode","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"encoded","name":"encoded","kind":"param"}],"line":"47","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"mapToQuery1()","comment":"Converts a [Map] from parameter names to values to a URL query string.\n\n    mapToQuery({\"foo\": \"bar\", \"baz\": \"bang\"});\n    //=> \"foo=bar&baz=bang\"","name":"mapToQuery","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"id":"map","name":"map","kind":"param"}],"line":"37","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"id":"queryToMap1()","comment":"Converts a URL query string (or `application/x-www-form-urlencoded` body)\ninto a [Map] from parameter names to values.\n\n    queryToMap(\"foo=bar&baz=bang&qux\");\n    //=> {\"foo\": \"bar\", \"baz\": \"bang\", \"qux\": \"\"}","name":"queryToMap","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"queryList","name":"queryList","kind":"param"}],"line":"21","kind":"method"},{"ref":{"refId":"dart.async/Stream","name":"Stream"},"id":"emptyStream","comment":"Returns a closed [Stream] with no elements.","name":"emptyStream","line":"165","kind":"property"},{"ref":{"refId":"dart.async/Future","name":"Future"},"id":"async","comment":"Returns a [Future] that asynchronously completes to `null`.","name":"async","line":"162","kind":"property"},{"ref":{"refId":"dart.core/RegExp","name":"RegExp"},"isFinal":true,"id":"_ASCII_ONLY","comment":"A regular expression that matches strings that are composed entirely of\nASCII-compatible characters.","name":"_ASCII_ONLY","isPrivate":true,"line":"101","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Pair","comment":"A pair of values.","name":"Pair","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","name":"toString","line":"203","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"205","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","name":"hashCode","line":"210","kind":"property"},{"ref":{"refId":"utils/Pair/E","name":"E"},"id":"first","name":"first","line":"198","kind":"variable"},{"ref":{"refId":"utils/Pair/F","name":"F"},"id":"last","name":"last","line":"199","kind":"variable"},{"id":"2()","name":"","children":[{"initializedField":{"refId":"utils/Pair/first","name":"first"},"ref":{"refId":"utils/Pair/E","name":"E"},"id":"first","name":"first","kind":"param"},{"initializedField":{"refId":"utils/Pair/last","name":"last"},"ref":{"refId":"utils/Pair/F","name":"F"},"id":"last","name":"last","kind":"param"}],"line":"201","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"},{"id":"F","name":"F","kind":"typeparam"}],"line":"197","kind":"class"}],"line":"5","kind":"library"}